#!/usr/bin/env node

const program = require('commander');
const fs = require('fs');
const path = require('path');
const low = require('lowdb');
const FileSync = require('lowdb/adapters/FileSync');
const CLIENT_DB_PATH = path.join(__dirname, 'client-db');
const { CosmosThreshSigClient, getBalance, getTxInfo, getTransactions, getStakingInfo} = require('../dist/src');
const { Address, AccAddress} = require('../dist/src');

const terra = require('@terra-money/core');

const client = new CosmosThreshSigClient();

function ensureDirSync(dirpath) {
    try {
        fs.mkdirSync(dirpath, { recursive: true });
    } catch (err) {
        if (err.code !== 'EEXIST') throw err;
    }
}

program
    .command('address')
    .option('-i, --index <index>', 'Address index')
    .action(async (options) => {
        await client.init();
        const address = client.getAddress(options.index);
        console.log(address);
    });

program
    .command('balance <address>')
    .option('-n, --network [name]', 'Name of network ("gaia" or "cosmoshub_3")')
    .action(async (address, options) => {
        console.log(await getBalance(address, options.network || 'gaia'));
    });

program
    .command('staking <address>')
    .option('-n, --network [name]', 'Name of network ("gaia" or "cosmoshub_3")')
    .action(async (address, options) => {
        console.log(await getStakingInfo(address, options.network || 'gaia'));
    });

program
    .command('tx <txhash>')
    .option('-n, --network [name]', 'Name of network ("gaia" or "cosmoshub_3")')
    .action(async (txhash, options) => {
        console.log(await getTxInfo(txhash, options.network || 'gaia'));
    });

program
    .command('transactions')
    .option('-s --sender <sender>', 'Sender address')
    .option('-r --receiver <receiver>', 'Sender address')
    .option('-p --page <page>', 'Page number')
    .option('-l --limit <limit>', 'Page limit')
    .option('-n, --network [name]', 'Name of network ("gaia" or "cosmoshub_3")')
    .action(async (options) => {
        const txs = await getTransactions(options);
        console.log(JSON.stringify(txs, null, 2));
    });

program
    .command('transfer <from> <to> <amount>')
    .option('-d, --denom [symbol]', 'denomination of the transfer ("umuon" default, "atom", ...)')
    .option('-fd, --feedenom [symbol]', 'denomination of the fee ("umuon" default, "atom", ...)')
    .option('-n, --network [name]', 'Name of network ("gaia" or "mainnet")')
    .option('-dr, --dry_run', 'Print the tx without posting it')
    .option('-all, --all', 'Transfer all the coins of the specified currency')
    .action(async (from, to, amount, options) => {
        await client.init();
        const sendOptions = {memo: options.memo, chainName: options.network, feeDenom: options.feedenom };
        await client.transfer(from, to, amount, options.denom || 'umuon', sendOptions, options.all, options.dry_run);
    });

  program
    .command('delegate <from> <to> <amount>')
    .option('-d, --denom [symbol]', 'denomination of the transfer ("umuon" default, "atom", ...)')
    .option('-fd, --feedenom [symbol]', 'denomination of the fee ("umuon" default, "atom", ...)')
    .option('-n, --network [name]', 'Name of network ("gaia" or "mainnet")')
    .option('-dr, --dry_run', 'Print the tx without posting it')
    .option('-all, --all', 'Transfer all the coins of the specified currency')
    .action(async (from, to, amount, options) => {
        await client.init();
        const sendOptions = {memo: options.memo, chainName: options.network, feeDenom: options.feedenom };
        await client.delegate(from, to, amount, options.denom || 'umuon', sendOptions, options.all, options.dry_run);
    });

program.parse(process.argv);
