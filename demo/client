#!/usr/bin/env node

const program = require('commander');

const {
  CosmosThreshSigClient,
  getBalance,
  getTxInfo,
  getRedelegationsInfo,
  getTransactions,
  getDelegationInfo,
  getUnbondingInfo,
  getRewardsInfo,
} = require('../dist/src');

const client = new CosmosThreshSigClient();

program
  .command('address')
  .option('-i, --index <index>', 'Address index')
  .action(async (options) => {
    await client.init();
    const address = client.getAddress(options.index);
    console.log(address);
  });

program
  .command('balance <address>')
  .option('-n, --network [name]', 'Name of network ("gaia" or "cosmoshub_3")')
  .action(async (address, options) => {
    console.log(await getBalance(address, options.network || 'gaia'));
  });

program
  .command('delegations <address>')
  .option('-n, --network [name]', 'Name of network ("gaia" or "cosmoshub_3")')
  .action(async (address, options) => {
    console.log(await getDelegationInfo(address, options.network || 'gaia'));
  });

program
  .command('rewards <address>')
  .option('-n, --network [name]', 'Name of network ("gaia" or "cosmoshub_3")')
  .action(async (address, options) => {
    console.log(
      JSON.stringify(await getRewardsInfo(address, options.network || 'gaia')),
    );
  });

program
  .command('unbonding <address>')
  .option('-n, --network [name]', 'Name of network ("gaia" or "cosmoshub_3")')
  .action(async (address, options) => {
    console.log(
      JSON.stringify(
        await getUnbondingInfo(address, options.network || 'gaia'),
      ),
    );
  });

program
  .command('redelegations')
  .option('-d, --delegator [name]', 'Delegator address')
  .option('-n, --network [name]', 'Name of network ("gaia" or "cosmoshub_3")')
  .action(async (options) => {
    console.log(
      JSON.stringify(
        await getRedelegationsInfo(
          options.network || 'gaia',
          options.delegator,
        ),
      ),
    );
  });

program
  .command('tx <txhash>')
  .option('-n, --network [name]', 'Name of network ("gaia" or "cosmoshub_3")')
  .action(async (txhash, options) => {
    console.log(await getTxInfo(txhash, options.network || 'gaia'));
  });

program
  .command('transactions')
  .option('-s --sender <sender>', 'Sender address')
  .option('-r --receiver <receiver>', 'Sender address')
  .option('-p --page <page>', 'Page number')
  .option('-l --limit <limit>', 'Page limit')
  .option('-n, --network [name]', 'Name of network ("gaia" or "cosmoshub_3")')
  .action(async (options) => {
    const txs = await getTransactions(options);
    console.log(JSON.stringify(txs, null, 2));
  });

program
  .command('transfer <from> <to> <amount>')
  .option(
    '-d, --denom [symbol]',
    'denomination of the transfer ("umuon" default, "atom", ...)',
  )
  .option(
    '-fd, --feedenom [symbol]',
    'denomination of the fee ("umuon" default, "atom", ...)',
  )
  .option('-n, --network [name]', 'Name of network ("gaia" or "mainnet")')
  .option('-dr, --dry_run', 'Print the tx without posting it')
  .option('-all, --all', 'Transfer all the coins of the specified currency')
  .action(async (from, to, amount, options) => {
    await client.init();
    const sendOptions = {
      memo: options.memo,
      chainName: options.network,
      feeDenom: options.feedenom,
    };
    await client.transfer(
      from,
      to,
      amount,
      options.denom || 'umuon',
      sendOptions,
      options.all,
      options.dry_run,
    );
  });

program
  .command('delegate <from> <to> <amount>')
  .option(
    '-d, --denom [symbol]',
    'denomination of the transfer ("umuon" default, "atom", ...)',
  )
  .option(
    '-fd, --feedenom [symbol]',
    'denomination of the fee ("umuon" default, "atom", ...)',
  )
  .option('-n, --network [name]', 'Name of network ("gaia" or "mainnet")')
  .option('-dr, --dry_run', 'Print the tx without posting it')
  .option('-all, --all', 'Transfer all the coins of the specified currency')
  .action(async (from, to, amount, options) => {
    await client.init();
    const sendOptions = {
      memo: options.memo,
      chainName: options.network,
      feeDenom: options.feedenom,
    };
    await client.delegate(
      from,
      to,
      amount,
      options.denom || 'umuon',
      sendOptions,
      options.all,
      options.dry_run,
    );
  });

program
  .command('undelegate <delegator> <validator> <amount>')
  .option(
    '-d, --denom [symbol]',
    'denomination of the transfer ("umuon" default, "atom", ...)',
  )
  .option(
    '-fd, --feedenom [symbol]',
    'denomination of the fee ("umuon" default, "atom", ...)',
  )
  .option('-n, --network [name]', 'Name of network ("gaia" or "mainnet")')
  .option('-dr, --dry_run', 'Print the tx without posting it')
  .option('-all, --all', 'Transfer all the coins of the specified currency')
  .action(async (delegator, validator, amount, options) => {
    await client.init();
    const sendOptions = {
      memo: options.memo,
      chainName: options.network,
      feeDenom: options.feedenom,
    };
    await client.undelegate(
      delegator,
      validator,
      amount,
      options.denom || 'umuon',
      sendOptions,
      options.all,
      options.dry_run,
    );
  });

program
  .command('redelegate <delegator> <validator_src> <validator_dst> <amount>')
  .option(
    '-d, --denom [symbol]',
    'denomination of the transfer ("umuon" default, "atom", ...)',
  )
  .option(
    '-fd, --feedenom [symbol]',
    'denomination of the fee ("umuon" default, "atom", ...)',
  )
  .option('-n, --network [name]', 'Name of network ("gaia" or "mainnet")')
  .option('-dr, --dry_run', 'Print the tx without posting it')
  .option('-all, --all', 'Transfer all the coins of the specified currency')
  .action(async (delegator, validator_src, validator_dst, amount, options) => {
    await client.init();
    const sendOptions = {
      memo: options.memo,
      chainName: options.network,
      feeDenom: options.feedenom,
    };
    await client.redelegate(
      delegator,
      validator_src,
      validator_dst,
      amount,
      options.denom || 'umuon',
      sendOptions,
      options.all,
      options.dry_run,
    );
  });

program
  .command('collect <delegator>')
  .option('-n, --network [name]', 'Name of network ("gaia" or "mainnet")')
  .option('-dr, --dry_run', 'Print the tx without posting it')
  .action(async (delegator, options) => {
    await client.init();
    const sendOptions = { memo: options.memo, chainName: options.network };
    await client.collectRewards(delegator, sendOptions, options.dry_run);
  });

program.parse(process.argv);
